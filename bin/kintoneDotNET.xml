<?xml version="1.0"?>
<doc>
<assembly>
<name>
kintoneDotNET
</name>
</assembly>
<members>
<member name="T:kintoneDotNET.My.Resources.Resources">
<summary>
  ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
</summary>
</member>
<member name="P:kintoneDotNET.My.Resources.Resources.ResourceManager">
<summary>
  このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
</summary>
</member>
<member name="P:kintoneDotNET.My.Resources.Resources.Culture">
<summary>
  厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
  現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
</summary>
</member>
<member name="T:kintoneDotNET.API.AbskintoneModel">
 <summary>
 kintoneのレコードに対応するモデルの基となる、抽象クラス
 </summary>
 <remarks>
 読込は全てのプロパティに対して行われるが、kintoneへ送信するのはkintoneItemAttribute属性が付与されており、isUpload=Trueのもの(デフォルトTrue)<br/>
 このため、kintone側で更新したいプロパティについては&lt;kintoneItem()&gt;を付与する。<br/>
 リスト型のデータ(チェックボックスリストや添付ファイルなど)については、List(Of )で宣言を行う必要あり
 </remarks>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.app">
 <summary>
 kintoneのアプリケーションID
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.record_id">
 <summary>
 [共通]レコード番号
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.created_time">
 <summary>
 [共通]登録時刻
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.updated_time">
 <summary>
 [共通]更新時刻
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.create_usr">
 <summary>
 [共通]登録者
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.update_usr">
 <summary>
 [共通]更新者
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.status">
 <summary>
 [共通]ステータス (※プロセスを使っている場合値を取得可能)
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.work_usr">
 <summary>
 [共通]作業者
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.revision">
 <summary>
 [共通]リビジョン番号<br/>
 初期値は-1(この場合、送信してもkintone側で検証は行われない)
 </summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.IgnoreRevision">
 <summary>更新時、リビジョンを無視して更新する(デフォルトFalse)</summary>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.ConvertDictionary">
 <summary>
 デフォルトの日本語項目名称を変換するためのディクショナリを取得<br/>
 レコード番号などのデフォルト項目の項目名を変更している場合、このプロパティをオーバーライドしてください
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.AbskintoneModel.record_show_url">
 <summary>
 kintone上でのレコードURL
 </summary>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
 <summary>
 レコードの検索を行う(expression指定)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="expression">Booleanを返却する関数式</param>
 <param name="isConvert">デフォルトの項目変換をかけるか否か</param>
 <returns></returns>
 <remarks>
 kintone上ではレコード番号などのデフォルト項目をrecord_id等でなく「レコード番号」と日本語そのままでもっているため、この名前で検索を行わないとエラーになります<br/>
 isConvert=True(デフォルト値)としておけば、record_id->レコード番号といったデフォルト項目の変換を自動で行ってくれます。<br/>
 <example>
 <para>
 <code>
   'AbskintoneModelを継承して作成したBookModelを使用し、検索を行う
   Dim list AS List(Of BookModel) = BookModel.Find(Of BookModel)(Function(x) x.title Like "Mathematics" And x.price &lt; 3000 )
   
   'Attributeを設定しておけば、日付型の条件指定もDateTime型オブジェクトから直接行えます
   Dim upds AS List(Of BookModel) = BookModel.Find(Of BookModel)(Function(x) x.updated_time >= DateTime.Now)
 </code>
 </para>
 </example>
 </remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Find``1(System.String)">
 <summary>
 レコードの検索を行う(文字列クエリ指定)<br/>
 ※クエリを作成する際、title="hoge"と文字列型の場合""で比較値を囲う必要がある点に注意してください<br/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="query">任意のクエリ文字列</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Find``1">
 <summary>
 直接条件を指定せず、クエリオブジェクトから検索を行う
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.FindById``1(System.String)">
 <summary>
 id指定によるレコードの検索
 </summary>
 <typeparam name="T"></typeparam>
 <param name="id"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.FindByIds``1(System.Collections.Generic.List{System.String})">
 <summary>
 idの複数指定によるレコードの検索
 </summary>
 <typeparam name="T"></typeparam>
 <param name="ids"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.FindAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
 <summary>
 レコードの検索を行う(全件)(expression指定)<br/>
 kintone APIの上限値を超える件数のレコードを取得します
 </summary>
 <typeparam name="T"></typeparam>
 <param name="expression">Booleanを返却する関数式</param>
 <param name="isConvert">デフォルトの項目変換をかけるか否か</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.FindAll``1(System.String)">
 <summary>
 レコードの検索を行う(全件)(文字列クエリ指定)<br/>
 kintone APIの上限値を超える件数のレコードを取得します
 </summary>
 <typeparam name="T"></typeparam>
 <param name="query"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.FindAll``1">
 <summary>
 直接条件を指定せず、クエリオブジェクトから検索を行う
 </summary>
 <typeparam name="T"></typeparam>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Create``1(System.Collections.Generic.List{``0})">
 <summary>
 レコードの登録を行う<br/>
 登録を行った後、登録を行ったレコードをkintone上から取得し返却します
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs">登録対象オブジェクト</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Update``1(System.Collections.Generic.List{``0})">
 <summary>
 レコードの更新を行う
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Save``1(System.Collections.Generic.List{``0})">
 <summary>
 レコードの保存を行う<br/>
 モデル上 isKey = True と設定された項目をキーとし、一致するキーがある場合はUpdate、なければCreateを行う
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Delete``1(System.Collections.Generic.List{System.String})">
 <summary>
 レコードの削除を行う
 </summary>
 <typeparam name="T"></typeparam>
 <param name="ids"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Create">
 <summary>
 レコードの登録(単一)を行う<br/>
 自身をkintone上に登録します
 </summary>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Update">
 <summary>
 レコードの更新(単一)を行う<br/>
 自身のレコードを更新します
 </summary>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Save">
 <summary>
 レコードの保存を行う<br/>
 isKey = True で設定されたレコードがある場合更新、なければ登録を行います。
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.setkintoneIndex(System.Object)">
 <summary>
 オブジェクトをkintoneIndexにキャストし、値を自身にコピーする
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.Delete">
 <summary>
 レコードの削除(単一)を行う<br/>
 自身のIDに一致するレコードを削除します
 </summary>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.execute(System.String,System.Object[])">
 <summary>
 実体である自身のタイプでkintoneAPIのジェネリクスメソッドをコールする
 </summary>
 <param name="methodName"></param>
 <param name="params"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.CreateHook``1(System.Collections.Generic.List{``0})">
 <summary>
 Create処理実行前に行われる処理<br/>
 事前に行っておくべき処理(値設定/対象の追加・削除)があればここに実装する
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs">Create対象オブジェクト</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.UpdateHook``1(System.Collections.Generic.List{``0})">
 <summary>
 Update処理実行前に行われる処理<br/>
 事前に行っておくべき処理(値設定/対象の追加・削除)があればここに実装する
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs">>Update対象オブジェクト</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.DeleteHook``1(System.Collections.Generic.List{System.String})">
 <summary>
 Delete処理実行前に行われる処理<br/>
 事前に行っておくべき処理(値設定/対象の追加・削除)があればここに実装する
 </summary>
 <typeparam name="T"></typeparam>
 <param name="ids">Delete対象id</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.GetAPI">
 <summary>
 自身を操作するAPIを取得する
 </summary>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.GetAPI``1">
 <summary>
 自身を操作するAPIを取得する(Shared Method用)
 </summary>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.GetToPropertyDic">
 <summary>
 kintone上の項目名称("レコード番号","作成日時" など)をプロパティ名(record_id,updated_time etc)に変換するためのDictionaryを取得する
 </summary>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.GetToItemNameDic">
 <summary>
 プロパティ名をkintone上の項目名称に変換するためのDictionaryを取得する
 </summary>
</member>
<member name="M:kintoneDotNET.API.AbskintoneModel.GetNameConvertDic(kintoneDotNET.API.NameConvertor.Direction)">
 <summary>
 変換用Dictionaryを取得するための内部処理
 </summary>
 <param name="direction"></param>
</member>
<member name="T:kintoneDotNET.API.NameConvertor">
 <summary>
 kintone上のアイテム名とコード上のプロパティ名を対応させるための変換ルール
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneAccount">
 <summary>
 kintoneアカウント情報を格納するためのクラス。
 コンストラクタが読み込むapp.configの設定に対して優先使用されます。
 </summary>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.Domain">
 <summary>
 アプリケーションのドメイン
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.AccessId">
 <summary>
 Basic認証のためのID
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.AccessPassword">
 <summary>
 Basic認証のためのパスワード
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.LoginId">
 <summary>
 kintoneのログインを行うためのID
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.LoginPassword">
 <summary>
 kintoneのログインを行うためのパスワード
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.ApiToken">
 <summary>
 kintoneのアプリごとに生成するAPIトークン。
 設定されている場合、ログインID/パスワードより優先される。
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.Proxy">
 <summary>
 Proxyを経由する場合のアドレス
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.ProxyUser">
 <summary>
 認証が必要なプロキシの場合のユーザー名
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAccount.ProxyPassword">
 <summary>
 認証が必要なプロキシの場合のパスワード
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAccount.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 kintoneアカウント情報を格納するためのクラス。
 コンストラクタが読み込むapp.configの設定に対して優先使用されます。
 </summary>
 <param name="domain">アプリケーションのドメイン</param>
 <param name="accessId">Basic認証のためのID</param>
 <param name="accessPassword">Basic認証のためのパスワード</param>
 <param name="loginId">kintoneのログインを行うためのID</param>
 <param name="loginPassword">kintoneのログインを行うためのパスワード</param>
 <param name="apiToken">kintoneのアプリごとに生成するAPIトークン。
 設定されている場合、ログインID/パスワードより優先される。</param>
 <param name="proxy">Proxyを経由する場合のアドレス</param>
 <param name="proxyUser">認証が必要なプロキシの場合のユーザー名</param>
 <param name="proxyPassword">認証が必要なプロキシの場合のパスワード</param>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneAPI">
 <summary>
 kintoneのREST APIをコールするためのクラス<br/>
 REST APIについては<a href="https://developers.cybozu.com/ja/kintone-api/common-appapi.html">サイボウズ公式のドキュメント</a>参照
 </summary>
 <remarks>
 ジェネリクスクラスにするとSharedで使用できなくなるデメリットが大きいため、あくまでメソッド単位に留める
 </remarks>
</member>
<member name="F:kintoneDotNET.API.kintoneAPI.KINTONE_REC_LIMIT">
 <summary>
 kintone APIの読み込み上限値<br/>
 現在500だが、kintoneAPIの上限値が変更されれば要修正
 </summary>
 <remarks></remarks>
</member>
<member name="F:kintoneDotNET.API.kintoneAPI.KINTONE_EXE_LIMIT">
 <summary>
 kintone APIの更新上限値<br/>
 現在500だが、kintoneAPIの上限値が変更されれば要修正
 </summary>
 <remarks></remarks>
</member>
<member name="F:kintoneDotNET.API.kintoneAPI.URL_LENGTH_LIMIT">
 <summary>
 主にレコード取得のために使用するURL長の制限値
 </summary>
 <remarks></remarks>
</member>
<member name="F:kintoneDotNET.API.kintoneAPI.RECORD_LIMIT">
 <summary>
 本APIで扱うレコードの最大値(余りに大きい件数の処理を途中で止めるための措置)
 </summary>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.ApiEncoding">
 <summary>
 送受信時のエンコード
 </summary>
 <value></value>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.Account">
 <summary>
 kintone接続情報。接続情報を動的に設定する場合に使用。
 各プロパティに値が設定されている場合は優先使用
 </summary>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.Domain">
 <summary>
 アプリケーションのドメイン。
 </summary>
 <value></value>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.Host">
 <summary>
 kintoneのアクセス先。"xxx.cybozu.com"というようなアドレスで表現される(xxxはDomain)
 </summary>
 <value></value>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.AppId">
 <summary>
 アクセス先アプリケーションのID。コンストラクタで指定
 </summary>
 <value></value>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.ReadLimit">
 <summary>
 レコードの読み取り上限を設定する。設定がない場合、APIの上限値が設定される<br/>
 上限値については、<a href="https://developers.cybozu.com/ja/kintone-api/apprec-readapi.html">レコード取得</a>の「クエリで条件を指定する」を参照
 </summary>
 <value></value>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.ExecuteLimit">
 <summary>
 レコード更新件数の上限を設定する。設定がない場合、APIの上限値が設定される<br/>
 </summary>
 <value></value>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.AccessKey">
 <summary>
 Basic認証のためのキーを作成する。形式については<a href="http://developers.cybozu.com/ja/kintone-api/common-appapi.html">公式ドキュメント</a>を参照
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.LoginKey">
 <summary>
 kintoneのログインを行うためのキーを作成する
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.ApiToken">
 <summary>
 kintoneのAPIトークンを取得する
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneAPI.Proxy">
 <summary>
 Proxyを経由する場合、プロキシの設定を行う
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.#ctor(System.String)">
 <summary>
 アプリケーションIDを指定し、APIの生成を行う
 </summary>
 <param name="id">アプリケーションID</param>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.makeHeader(System.String,System.String,System.String)">
 <summary>
 kintoneにアクセスするためのHTTPヘッダを作成する
 </summary>
 <param name="command">record/records、fileなどのREST APIの名称</param>
 <param name="method">POST/GETなどのメソッドタイプ</param>
 <param name="query">クエリ引数</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.Find``1(System.String)">
 <summary>
 レコードの検索を行う<br/>
 ※このメソッドは、kintoneのレコード数上限までしか取得を行いません。全件取得する場合はFindAllを使用してください
 </summary>
 <param name="query">
 queryの形式については、<a href="https://developers.cybozu.com/ja/kintone-api/apprec-readapi.html">公式ドキュメント</a>を参照<br/>
 item="xxxx"のように、文字列値は""で囲う必要があるため注意
 </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.FindAll``1(kintoneDotNET.API.kintoneQuery{``0})">
 <summary>
 API上限値を超えたレコードの検索を行う<br/>
 ※並列でリクエストを投げ取得を行うため、order等の指定は考慮されない。データ取得後LINQ等で並び替えを行う必要あり
 </summary>
 <param name="query"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.makeTaskForFind``1(kintoneDotNET.API.kintoneQuery{``0},System.Int32)">
 <summary>
 検索を行うタスクを生成するための内部処理
 </summary>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.FindBase``1(kintoneDotNET.API.kintoneQuery{``0},kintoneDotNET.API.Types.kintoneError@)">
 <summary>
 検索処理の実体
 </summary>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.Create``1(``0)">
 <summary>
 レコード登録を行う(単一)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.BulkCreate``1(System.Collections.Generic.List{``0})">
 <summary>
 レコード登録を行う(複数件)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.taskCreate``1(System.Collections.Generic.List{``0})">
 <summary>
 レコード登録処理の実体
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.Update``1(``0)">
 <summary>
 レコードの更新を行う(単一)
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.BulkUpdate``1(System.Collections.Generic.List{``0})">
 <summary>
 レコードの更新を行う(複数件)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.taskUpdate``1(System.Collections.Generic.List{``0})">
 <summary>
 レコード更新処理の実体
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.Save``1(``0)">
 <summary>
 レコードの保存処理(単一)<br/>
 モデル上 isKey = True と設定された項目をキーとし、一致するキーがある場合はUpdate、なければCreateを行う
 </summary>
 <typeparam name="T"></typeparam>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.SetIndexToModels``1(System.Collections.Generic.List{``0}@)">
 <summary>
 受け取ったオブジェクトとキーが一致するレコードをkintoneから検索し、idをセットする
 </summary>
 <typeparam name="t"></typeparam>
 <param name="objs"></param>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.BulkSave``1(System.Collections.Generic.List{``0})">
 <summary>
 レコードの保存処理(複数件)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="objs"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.Delete``1(System.String)">
 <summary>
 レコードの削除を行う(単一)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="id"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.BulkDelete``1(System.Collections.Generic.List{System.String})">
 <summary>
 レコードの削除を行う(複数件)
 </summary>
 <typeparam name="T"></typeparam>
 <param name="ids"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.taskDelete``1(System.Collections.Generic.List{System.String})">
 <summary>
 削除処理の実体
 </summary>
 <typeparam name="T"></typeparam>
 <param name="ids"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.UploadFile(System.Web.HttpPostedFile)">
 <summary>
 ファイルのアップロードを行う(単一)<br/>
 </summary>
 <param name="file"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.UploadFile(System.Web.HttpPostedFileBase)">
 <summary>
 ファイルのアップロードを行う(単一) <br/>
 HttpPostedFileは非常に特殊な型でWeb上でファイルアップロードを行っている以外の場合は使用しにくいため、上位クラスのHttpPostedFileBaseを引数にとるメソッドを用意
 </summary>
 <param name="file"></param>
 <returns></returns>
 <remarks>
 <example>
 <para>
 PostedFile型を使用することで通常のFileStreamを処理できます
 <code>
   Dim file As PostedFile = New PostedFile("C:\temp\xxxx.PNG"))
   kintoneAPI.UploadFile(file)
 </code>
 </para>
 </example>
 </remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.UploadFile(System.Collections.ObjectModel.ReadOnlyCollection{System.Web.HttpPostedFileBase})">
 <summary>
 ファイルのアップロードを行う(複数件)<br/>
 kintone上、複数ファイルをアップロードしてもキーは単一になる。このためアップロードに使用したキーとファイルダウンロードのキーは異なるので注意
 </summary>
 <param name="files"></param>
 <returns></returns>
 <remarks> 
 </remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.UploadFile(System.Collections.ObjectModel.ReadOnlyCollection{System.Web.HttpPostedFile})">
 <summary>
 ファイルのアップロードを行う(複数件)
 </summary>
 <param name="files"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.DownloadFile(System.String)">
 <summary>
 ファイルのダウンロードを行う
 </summary>
 <param name="fileKey"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.getResponse(System.Net.HttpWebRequest,kintoneDotNET.API.Types.kintoneError@)">
 <summary>
 Response取得のための共通関数<br/>
 返却値のHttpWebResponseはUsing/End Usingセクションで扱い、使用後破棄されるようにしないと
 <a href="http://stackoverflow.com/questions/12513078/system-net-webrequest-timeout-error">Timeoutが発生することがある</a>ため注意<br/>
 Responseの破棄を確実にするため、例外をthrowせずエラー処理は呼び出し側に委譲する<br/>
 </summary>
 <param name="request"></param>
 <param name="kerror"></param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneAPI.executeParallel``2(System.Collections.Generic.List{``0},System.Func{System.Collections.Generic.List{``0},``1})">
 <summary>
 並列処理のための共通関数
 </summary>
 <typeparam name="T">モデルの型</typeparam>
 <typeparam name="R">各処理での返り値の型</typeparam>
 <param name="objs">モデルの配列</param>
 <param name="executor">スレッドで使用する関数</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneContentConvertor`1">
 <summary>
 kintoneから返却されるJSONの読み込み、また送信する際のシリアライズを行うConvertor
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneContentConvertor`1.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
 <summary>
 kintoneへ送信する際のシリアライズを行う
 </summary>
 <param name="obj"></param>
 <param name="serializer"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneContentConvertor`1.isSendTarget(System.Object,System.Reflection.PropertyInfo,kintoneDotNET.API.kintoneItemAttribute)">
 <summary>
 送信対象の項目であるかを判定する
 </summary>
 <param name="propInfo">項目のプロパティ情報</param>
 <param name="attribute">属性情報</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneContentConvertor`1.makeKintoneItem(System.Type,kintoneDotNET.API.kintoneItemAttribute,System.Object,System.Web.Script.Serialization.JavaScriptSerializer,System.Boolean)">
 <summary>
 Serialize時、項目の型に応じた変換処理を行う
 </summary>
 <param name="pType"></param>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneContentConvertor`1.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
 <summary>
 kintoneから受け取ったJSONを、モデル型配列に変換する
 </summary>
 <param name="dictionary"></param>
 <param name="type"></param>
 <param name="serializer"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneContentConvertor`1.readKintoneItem(System.Type,System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
 <summary>
 モデルのプロパティ型に合わせてデータのセットを行う
 </summary>
 <param name="pType"></param>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneErrorConvertor">
 <summary>
 kintoneから返却されたエラー内容をデシリアライズするためのクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneException">
 <summary>
 kintone上で発生したエラーを補足するための例外
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneQueryExpression">
 <summary>
 レコードを検索するためのクエリを作成するクラス
 </summary>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQueryExpression.Eval``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
 <summary>
 LINQのExpressionからクエリ式を生成する<br/>
 変換用のディクショナリはモデルから取得
 </summary>
 <typeparam name="T"></typeparam>
 <param name="expression"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQueryExpression.Eval``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 LINQのExpressionからクエリ式を生成する<br/>
 </summary>
 <typeparam name="T"></typeparam>
 <param name="expression">Booleanを返却するexpression</param>
 <param name="nameConvertor">クエリ上の項目名を特定の項目名に変換したい場合、変換用ディクショナリを設定</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneFieldConnector">
 <summary>
 フィールドの連結子を管理するクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneQueryField">
 <summary>
 条件式を表現するクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneQuery`1">
 <summary>
 kintoneのクエリを作成するための中間オブジェクト
 </summary>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
 <summary>
 抽出条件の設定を行う
 </summary>
 <param name="expression"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.ConvertBy(System.Collections.Generic.Dictionary{System.String,System.String})">
 <summary>
 項目変換用のディクショナリを設定
 </summary>
 <param name="dic"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.ConvertOff">
 <summary>
 項目変換をオフにする
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.ConvertOn">
 <summary>
 項目変換をオンにする
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.Offset(System.Int32)">
 <summary>
 レコードの読み出し位置(Offset)の指定を行う
 </summary>
 <param name="index"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.Limit(System.Int32)">
 <summary>
 抽出するレコード件数(Limit)の指定を行う
 </summary>
 <param name="size"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.Fields(System.String[])">
 <summary>
 抽出対象のフィールドを指定する
 </summary>
 <param name="names"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.Ascending(System.String[])">
 <summary>
 昇順のオーダー設定を行う
 </summary>
 <param name="names"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.Descending(System.String[])">
 <summary>
 降順のオーダー設定を行う
 </summary>
 <param name="names"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.Build(System.Boolean)">
 <summary>
 与えられたパラメーターを元にクエリ式を組み立てる
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.kintoneQuery`1.op_Implicit(kintoneDotNET.API.kintoneQuery{`0})~System.Collections.Generic.List{`0}">
 <summary>
 リスト型への暗黙型変換
 </summary>
 <param name="q"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneDatetime">
 <summary>
 kintone上の日付データ型と合わせるための変換を行うクラス
 このクラスは型宣言するためでなく、変換を行うために存在する(日付型は通常通りDatetime型で宣言する)
 </summary>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.Types.kintoneDatetime.InitialValue">
 <summary>
 kintone上の日付の初期値を取得する
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 kintoen上のDatetimeは"1,000年以上9,999年以下の日付でなければなりません。"
 UTC時刻に換算すると1000を下回ってしまう場合に備え、時刻は23:59:59とする
 </remarks>
</member>
<member name="M:kintoneDotNET.API.Types.kintoneDatetime.kintoneToDatetime(System.Object)">
 <summary>
 kintone上の時刻をDateTimeオブジェクトに変換する
 </summary>
 <param name="obj"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.Types.kintoneDatetime.toKintoneFormat(System.DateTime,System.String)">
 <summary>
 DateTime型変数をkintone上の時刻フィールドに変換する
 </summary>
 <param name="vdate"></param>
 <param name="format"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.Types.kintoneDatetime.toDatetime(System.String,System.String)">
 <summary>
 テキスト文字列からDateTime型に変換するユーティリティ関数
 </summary>
 <param name="text"></param>
 <param name="format"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneFile">
 <summary>
 kintone上の添付ファイルフィールド型に対応するためのクラス
 </summary>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.Types.kintoneFile.GetFile">
 <summary>
 kintoneからfileKeyで指定されたファイルのダウンロードを行う
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.Types.kintoneFile.DownloadFile">
 <summary>
 ファイルのダウンロードを行い、HttpResponseで返却する
 Webサイトなどでファイル出力を行うためのメソッド
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneSubTableItem">
 <summary>
 内部テーブル内の項目を表現するクラス。継承して使用
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.IkintoneType">
 <summary>
 kintoneのフィールド型に対応するクラスを示すための、マーカーインタフェース
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneItem">
 <summary>
 JSONを送受信する際の、各項目に対応するクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneRecords`1">
 <summary>
 GETのResponse(JSON)読み取り用のクラス
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneIndex">
 <summary>
 id/リビジョンを保持するクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneIndexes">
 <summary>
 id/リビジョンの一覧を受け取るためのクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneUpdates`1">
 <summary>
 Update対象を示すクラス
 </summary>
 <typeparam name="T"></typeparam>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneDeletes">
 <summary>
 Delete対象を指定するためのクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneError">
 <summary>
 kintone上でのエラーを取得するためのクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneErrorDetail">
 <summary>
 エラーの詳細を格納するためのクラス<br/>
 APIの定義書に未記載の内容を元にしているため、APIバージョンアップに伴い編集が必要な可能性あり
 </summary>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.Types.kintoneErrorDetail.index">
 <summary>
 エラーの発生したレコード位置
 </summary>
</member>
<member name="P:kintoneDotNET.API.Types.kintoneErrorDetail.messages">
 <summary>
 各フィールドで発生したエラーメッセージ
 </summary>
</member>
<member name="T:kintoneDotNET.API.Types.kintoneUser">
 <summary>
 kintone上のユーザーフィールド型に対応するためのクラス
 </summary>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.Types.PostedFile">
 <summary>
 HttpPostedFileをエミュレートするクラス。ファイルパスから作成可能。
 </summary>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.Types.PostedFile.#ctor(System.String)">
 <summary>
 受け取ったパスから、FileStreamで読み込みを行いインスタンスを初期化する
 </summary>
 <param name="filePath"></param>
 <remarks></remarks>
</member>
<member name="M:kintoneDotNET.API.Types.PostedFile.#ctor(System.String,System.IO.Stream)">
 <summary>
 直接Streamを受け取りインスタンスを初期化する
 </summary>
 <param name="fileName"></param>
 <param name="stream"></param>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneItemAttribute">
 <summary>
 kintoneへの更新対象項目を示すアトリビュート
 </summary>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneItemAttribute.FieldType">
 <summary>
 kintone上のタイプを明示的に指定する。
 1.Datetime型の場合に、日付時刻(DATETIME)/日付(YMD)/時刻(TIME)で3タイプあるため明示的に指定する
 2.Integer型の場合で、リビジョンを指定するフィールドであることを明示
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneItemAttribute.InitialValue">
 <summary>
 値がNothingの場合の初期値(空白文字列も対象となる。String.isNullOrEmptyの場合設定値が適用される)
 ラジオボタンなど、値の設定が必須となる場合に使用する
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneItemAttribute.isUpload">
 <summary>
 更新対象か否かのフラグ。デフォルトTrue
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:kintoneDotNET.API.kintoneItemAttribute.isKey">
 <summary>
 重複を禁止するキーである項目に付与<br/>
 Saveを行う際、データの存在判定に使用される
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:kintoneDotNET.API.kintoneTypeExtension">
 <summary>
 データ型の性質上List型となる項目について、メソッド拡張を行う
 </summary>
 <remarks></remarks>
</member>
</members>
</doc>
